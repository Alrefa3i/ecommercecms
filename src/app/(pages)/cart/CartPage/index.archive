'use client'

import React, { Fragment, useEffect, useRef } from 'react'
import Link from 'next/link'

import { Page, Settings } from '../../../../payload/payload-types'
import { Button } from '../../../_components/Button'
import { HR } from '../../../_components/HR'
import { LoadingShimmer } from '../../../_components/LoadingShimmer'
import { Media } from '../../../_components/Media'
import { Price } from '../../../_components/Price'
import { RemoveFromCartButton } from '../../../_components/RemoveFromCartButton'
import { useAuth } from '../../../_providers/Auth'
import { useCart } from '../../../_providers/Cart'
import sha256 from 'crypto-js/sha256'

import classes from './index.module.scss'

export const CartPage: React.FC<{
  settings: Settings
  page: Page
}> = props => {
  const { settings } = props
  const { productsPage } = settings || {}

  const { user } = useAuth()
  const form = useRef<HTMLFormElement>(null)

  const { cart, cartIsEmpty, addItemToCart, cartTotal, hasInitializedCart } = useCart()

  const handleCheckout = () => {
    if (user) {
    } else {
      // redirect to login
    }
  }

  return (
    <Fragment>
      <br />
      {!hasInitializedCart ? (
        <div className={classes.loading}>
          <LoadingShimmer />
        </div>
      ) : (
        <Fragment>
          {cartIsEmpty ? (
            <div className={classes.empty}>
              Your cart is empty.
              {typeof productsPage === 'object' && productsPage?.slug && (
                <Fragment>
                  {' '}
                  <Link href={`/${productsPage.slug}`}>Click here</Link>
                  {` to shop.`}
                </Fragment>
              )}
              {!user && (
                <Fragment>
                  {' '}
                  <Link href={`/login?redirect=%2Fcart`}>Log in</Link>
                  {` to view a saved cart.`}
                </Fragment>
              )}
            </div>
          ) : (
            <div className={classes.items}>
              <div className={classes.itemsTotal}>
                {`There ${cart?.items?.length === 1 ? 'is' : 'are'} ${cart?.items?.length} item${
                  cart?.items?.length === 1 ? '' : 's'
                } in your cart.`}
                {!user && (
                  <Fragment>
                    {' '}
                    <Link href={`/login?redirect=%2Fcart`}>Log in</Link>
                    {` to save your progress.`}
                  </Fragment>
                )}
              </div>
              {cart?.items?.map((item, index) => {
                if (typeof item.product === 'object') {
                  const {
                    quantity,
                    product,
                    product: { id, title, meta },
                  } = item

                  const isLast = index === (cart?.items?.length || 0) - 1

                  const metaImage = meta?.image

                  return (
                    <Fragment key={index}>
                      <div className={classes.row}>
                        <Link href={`/products/${product.slug}`} className={classes.mediaWrapper}>
                          {!metaImage && <span className={classes.placeholder}>No image</span>}
                          {metaImage && typeof metaImage !== 'string' && (
                            <Media
                              className={classes.media}
                              imgClassName={classes.image}
                              resource={metaImage}
                              fill
                            />
                          )}
                        </Link>
                        <div className={classes.rowContent}>
                          <h5 className={classes.title}>
                            <Link href={`/products/${product.slug}`} className={classes.titleLink}>
                              {title}
                            </Link>
                          </h5>
                          <div className={classes.actions}>
                            <label>
                              Quantity &nbsp;
                              <input
                                type="number"
                                className={classes.quantity}
                                // fallback to empty string to avoid uncontrolled input error
                                // this allows the user to user their backspace key to clear the input
                                value={typeof quantity === 'number' ? quantity : ''}
                                onChange={e => {
                                  addItemToCart({
                                    product,
                                    quantity: Number(e.target.value),
                                  })
                                }}
                              />
                            </label>
                            <RemoveFromCartButton product={product} />
                          </div>
                          <Price product={product} button={false} quantity={quantity} />
                        </div>
                      </div>
                      {!isLast && <HR />}
                    </Fragment>
                  )
                }
                return null
              })}
              <HR />
              <h5 className={classes.cartTotal}>{`Total: ${cartTotal.formatted}`}</h5>
              {user && <SadadPaymentForm cartTotal={cartTotal} cart={cart} />}
            </div>
          )}
        </Fragment>
      )}
    </Fragment>
  )
}

type ProductDetail = {
  order_id: string
  amount: string
  quantity: number
}

type CartItem = {
  product: {
    id: string
    _price: string
  }
  quantity: number
}

type Props = {
  cartTotal: { raw: number }
  cart: { items?: any[] }
}

const SadadPaymentForm: React.FC<Props> = ({ cartTotal, cart }) => {
  const secretKey = 'aY0gHPbqHw6Xjcwr' // Test secret key
  const merchantId = '8967890' // Test merchant ID
  const origin = 'test.alrefa3ee.tech' // Test website domain
  const currentDate = new Date().toISOString().slice(0, 19).replace('T', ' ')

  const productdetail: ProductDetail[] | null =
    cart?.items?.map(item => {
      if (typeof item.product === 'object') {
        const { quantity, product } = item
        return {
          order_id: product.id,
          amount: product._price,
          quantity: quantity,
        }
      }
      return null
    }) ?? []

  const params = {
    CALLBACK_URL: 'https://test1.alrefa3ee.tech/callback',
    EMAIL: 'testuser@example.com',
    MOBILE_NO: '97455556666',
    ORDER_ID: 'TEST123456',
    TXN_AMOUNT: `${cartTotal.raw.toFixed(2)}`,
    WEBSITE: origin,
    merchant_id: merchantId,
    txnDate: currentDate,
    productdetail,
  }

  const generateSignature = (params: Record<string, any>, secretKey: string) => {
    const filteredKeys = Object.keys(params)
      .filter(key => key !== 'productdetail')
      .sort()

    let signatureString = secretKey
    filteredKeys.forEach(key => {
      signatureString += params[key]
    })

    return sha256(signatureString).toString()
  }

  const handleSubmit = () => {
    const signature = generateSignature(params, secretKey)
    const form = document.getElementById('sadadForm') as HTMLFormElement
    const signatureInput = document.createElement('input')
    signatureInput.type = 'hidden'
    signatureInput.name = 'signature'
    signatureInput.value = signature
    form.appendChild(signatureInput)
    form.submit()
  }

  useEffect(() => {
    const form = document.getElementById('sadadForm') as HTMLFormElement

    Object.keys(params).forEach(key => {
      if (key === 'productdetail' && Array.isArray(params[key])) {
        params[key].forEach((item: ProductDetail, index: number) => {
          Object.keys(item).forEach(subKey => {
            const input = document.createElement('input')
            input.type = 'hidden'
            input.name = `productdetail[${index}][${subKey}]`
            input.value = item[subKey as keyof ProductDetail] as string
            form.appendChild(input)
          })
        })
      } else {
        const input = document.createElement('input')
        input.type = 'hidden'
        input.name = key
        input.value = params[key as keyof typeof params] as string
        form.appendChild(input)
      }
    })
  }, [params])

  return (
    <form id="sadadForm" action="https://sadadqa.com/webpurchase" method="post">
      <Button
        className={classes.checkoutButton}
        onClick={handleSubmit}
        label="Proceed to Payment"
        appearance="primary"
      />
    </form>
  )
}
